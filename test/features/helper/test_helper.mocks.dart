// Mocks generated by Mockito 5.4.3 from annotations
// in e_book/test/features/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i26;
import 'dart:convert' as _i27;
import 'dart:typed_data' as _i29;

import 'package:bloc/bloc.dart' as _i39;
import 'package:dartz/dartz.dart' as _i4;
import 'package:e_book/core/errors/errors.dart' as _i38;
import 'package:e_book/core/networks/network_info.dart' as _i30;
import 'package:e_book/features/data/datasource/remote/author_info_remote_api.dart'
    as _i31;
import 'package:e_book/features/data/datasource/remote/awarded_books_remote_api.dart'
    as _i32;
import 'package:e_book/features/data/datasource/remote/book_detail_remote_api.dart'
    as _i33;
import 'package:e_book/features/data/datasource/remote/most_popular_author_remote_api.dart'
    as _i34;
import 'package:e_book/features/data/datasource/remote/most_popular_books_remote_api.dart'
    as _i35;
import 'package:e_book/features/data/datasource/remote/nominated_books_remote_api.dart'
    as _i36;
import 'package:e_book/features/data/datasource/remote/weekly_popular_books_remote_api.dart'
    as _i37;
import 'package:e_book/features/domain/entity/entity.dart' as _i3;
import 'package:e_book/features/domain/repositories/author_info_repository.dart'
    as _i5;
import 'package:e_book/features/domain/repositories/awarded_books_repository.dart'
    as _i6;
import 'package:e_book/features/domain/repositories/book_detail_repository.dart'
    as _i7;
import 'package:e_book/features/domain/repositories/most_popular_authors_repository.dart'
    as _i8;
import 'package:e_book/features/domain/repositories/most_popular_books_repository.dart'
    as _i9;
import 'package:e_book/features/domain/repositories/nominated_books_repository.dart'
    as _i10;
import 'package:e_book/features/domain/repositories/weekly_popular_books_repository.dart'
    as _i11;
import 'package:e_book/features/domain/usecases/get_author_info_usecasae.dart'
    as _i12;
import 'package:e_book/features/domain/usecases/get_awarded_books_usecase.dart'
    as _i14;
import 'package:e_book/features/domain/usecases/get_book_detail_usecase.dart'
    as _i16;
import 'package:e_book/features/domain/usecases/get_most_popular_authors_usecase.dart'
    as _i18;
import 'package:e_book/features/domain/usecases/get_most_popular_books_usecase.dart'
    as _i20;
import 'package:e_book/features/domain/usecases/get_nominated_books_usecase.dart'
    as _i22;
import 'package:e_book/features/domain/usecases/get_weekly_popular_books_usecase.dart'
    as _i24;
import 'package:e_book/features/presentation/blocs/author_info/author_info_bloc.dart'
    as _i13;
import 'package:e_book/features/presentation/blocs/awarded_books/awarded_books_bloc.dart'
    as _i15;
import 'package:e_book/features/presentation/blocs/book_details/book_details_bloc.dart'
    as _i17;
import 'package:e_book/features/presentation/blocs/most_popular_authors_list/most_popular_authors_bloc.dart'
    as _i19;
import 'package:e_book/features/presentation/blocs/most_popular_books/most_popular_books_bloc.dart'
    as _i21;
import 'package:e_book/features/presentation/blocs/nominated_books/nominated_books_list_bloc.dart'
    as _i23;
import 'package:e_book/features/presentation/blocs/weekly_popular_books/weekly_popular_books_bloc.dart'
    as _i25;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i28;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthorInfoEntity_2 extends _i1.SmartFake
    implements _i3.AuthorInfoEntity {
  _FakeAuthorInfoEntity_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBookDetailEntity_3 extends _i1.SmartFake
    implements _i3.BookDetailEntity {
  _FakeBookDetailEntity_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_4<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthorInfoRepository_5 extends _i1.SmartFake
    implements _i5.AuthorInfoRepository {
  _FakeAuthorInfoRepository_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAwardedBooksRepository_6 extends _i1.SmartFake
    implements _i6.AwardedBooksRepository {
  _FakeAwardedBooksRepository_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBookDetailRepository_7 extends _i1.SmartFake
    implements _i7.BookDetailRepository {
  _FakeBookDetailRepository_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMostPopularAuthorsRepository_8 extends _i1.SmartFake
    implements _i8.MostPopularAuthorsRepository {
  _FakeMostPopularAuthorsRepository_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMostPopularBooksRepository_9 extends _i1.SmartFake
    implements _i9.MostPopularBooksRepository {
  _FakeMostPopularBooksRepository_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNominatedBooksRepository_10 extends _i1.SmartFake
    implements _i10.NominatedBooksRepository {
  _FakeNominatedBooksRepository_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeeklyPopularBooksRepository_11 extends _i1.SmartFake
    implements _i11.WeeklyPopularBooksRepository {
  _FakeWeeklyPopularBooksRepository_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetAuthorInfoUseCase_12 extends _i1.SmartFake
    implements _i12.GetAuthorInfoUseCase {
  _FakeGetAuthorInfoUseCase_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthorInfoState_13 extends _i1.SmartFake
    implements _i13.AuthorInfoState {
  _FakeAuthorInfoState_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetAwardedBooksUseCase_14 extends _i1.SmartFake
    implements _i14.GetAwardedBooksUseCase {
  _FakeGetAwardedBooksUseCase_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAwardedBooksState_15 extends _i1.SmartFake
    implements _i15.AwardedBooksState {
  _FakeAwardedBooksState_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetBookDetailsUseCase_16 extends _i1.SmartFake
    implements _i16.GetBookDetailsUseCase {
  _FakeGetBookDetailsUseCase_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBookDetailsState_17 extends _i1.SmartFake
    implements _i17.BookDetailsState {
  _FakeBookDetailsState_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetMostPopularAuthorsUseCase_18 extends _i1.SmartFake
    implements _i18.GetMostPopularAuthorsUseCase {
  _FakeGetMostPopularAuthorsUseCase_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMostPopularAuthorsListState_19 extends _i1.SmartFake
    implements _i19.MostPopularAuthorsListState {
  _FakeMostPopularAuthorsListState_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetMostPopularBooksUseCase_20 extends _i1.SmartFake
    implements _i20.GetMostPopularBooksUseCase {
  _FakeGetMostPopularBooksUseCase_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMostPopularBooksState_21 extends _i1.SmartFake
    implements _i21.MostPopularBooksState {
  _FakeMostPopularBooksState_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetNominatedBooksUseCase_22 extends _i1.SmartFake
    implements _i22.GetNominatedBooksUseCase {
  _FakeGetNominatedBooksUseCase_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNominatedBooksListState_23 extends _i1.SmartFake
    implements _i23.NominatedBooksListState {
  _FakeNominatedBooksListState_23(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWeeklyPopularBooksUseCase_24 extends _i1.SmartFake
    implements _i24.GetWeeklyPopularBooksUseCase {
  _FakeGetWeeklyPopularBooksUseCase_24(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeeklyPopularBooksState_25 extends _i1.SmartFake
    implements _i25.WeeklyPopularBooksState {
  _FakeWeeklyPopularBooksState_25(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i2.Client {
  @override
  _i26.Future<_i2.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i26.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i26.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i26.Future<_i2.Response>);

  @override
  _i26.Future<_i2.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i26.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i26.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i26.Future<_i2.Response>);

  @override
  _i26.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i27.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i26.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i26.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i26.Future<_i2.Response>);

  @override
  _i26.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i27.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i26.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i26.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i26.Future<_i2.Response>);

  @override
  _i26.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i27.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i26.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i26.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i26.Future<_i2.Response>);

  @override
  _i26.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i27.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i26.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i26.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i26.Future<_i2.Response>);

  @override
  _i26.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i26.Future<String>.value(_i28.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i26.Future<String>.value(_i28.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i26.Future<String>);

  @override
  _i26.Future<_i29.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i26.Future<_i29.Uint8List>.value(_i29.Uint8List(0)),
        returnValueForMissingStub:
            _i26.Future<_i29.Uint8List>.value(_i29.Uint8List(0)),
      ) as _i26.Future<_i29.Uint8List>);

  @override
  _i26.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i26.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_1(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i26.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_1(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i26.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i30.NetworkInfo {
  @override
  _i26.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i26.Future<bool>.value(false),
        returnValueForMissingStub: _i26.Future<bool>.value(false),
      ) as _i26.Future<bool>);
}

/// A class which mocks [AuthorInfoRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthorInfoRemoteDataSource extends _i1.Mock
    implements _i31.AuthorInfoRemoteDataSource {
  @override
  _i26.Future<_i3.AuthorInfoEntity> getAuthorInfo(int? authorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAuthorInfo,
          [authorId],
        ),
        returnValue:
            _i26.Future<_i3.AuthorInfoEntity>.value(_FakeAuthorInfoEntity_2(
          this,
          Invocation.method(
            #getAuthorInfo,
            [authorId],
          ),
        )),
        returnValueForMissingStub:
            _i26.Future<_i3.AuthorInfoEntity>.value(_FakeAuthorInfoEntity_2(
          this,
          Invocation.method(
            #getAuthorInfo,
            [authorId],
          ),
        )),
      ) as _i26.Future<_i3.AuthorInfoEntity>);
}

/// A class which mocks [AwardedBooksRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAwardedBooksRemoteDataSource extends _i1.Mock
    implements _i32.AwardedBooksRemoteDataSource {
  @override
  _i26.Future<List<_i3.AwardedBooksEntity>> getAwardedBooks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAwardedBooks,
          [],
        ),
        returnValue: _i26.Future<List<_i3.AwardedBooksEntity>>.value(
            <_i3.AwardedBooksEntity>[]),
        returnValueForMissingStub:
            _i26.Future<List<_i3.AwardedBooksEntity>>.value(
                <_i3.AwardedBooksEntity>[]),
      ) as _i26.Future<List<_i3.AwardedBooksEntity>>);
}

/// A class which mocks [BookDetailsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookDetailsRemoteDataSource extends _i1.Mock
    implements _i33.BookDetailsRemoteDataSource {
  @override
  _i26.Future<_i3.BookDetailEntity> getBookDetails(int? bookId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookDetails,
          [bookId],
        ),
        returnValue:
            _i26.Future<_i3.BookDetailEntity>.value(_FakeBookDetailEntity_3(
          this,
          Invocation.method(
            #getBookDetails,
            [bookId],
          ),
        )),
        returnValueForMissingStub:
            _i26.Future<_i3.BookDetailEntity>.value(_FakeBookDetailEntity_3(
          this,
          Invocation.method(
            #getBookDetails,
            [bookId],
          ),
        )),
      ) as _i26.Future<_i3.BookDetailEntity>);
}

/// A class which mocks [MostPopularAuthorsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMostPopularAuthorsRemoteDataSource extends _i1.Mock
    implements _i34.MostPopularAuthorsRemoteDataSource {
  @override
  _i26.Future<List<_i3.MostPopularAuthorsEntity>> getPopularAuthors() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularAuthors,
          [],
        ),
        returnValue: _i26.Future<List<_i3.MostPopularAuthorsEntity>>.value(
            <_i3.MostPopularAuthorsEntity>[]),
        returnValueForMissingStub:
            _i26.Future<List<_i3.MostPopularAuthorsEntity>>.value(
                <_i3.MostPopularAuthorsEntity>[]),
      ) as _i26.Future<List<_i3.MostPopularAuthorsEntity>>);
}

/// A class which mocks [MostPopularBooksRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMostPopularBooksRemoteDataSource extends _i1.Mock
    implements _i35.MostPopularBooksRemoteDataSource {
  @override
  _i26.Future<List<_i3.MostPopularBooksEntity>> getPopularBooks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularBooks,
          [],
        ),
        returnValue: _i26.Future<List<_i3.MostPopularBooksEntity>>.value(
            <_i3.MostPopularBooksEntity>[]),
        returnValueForMissingStub:
            _i26.Future<List<_i3.MostPopularBooksEntity>>.value(
                <_i3.MostPopularBooksEntity>[]),
      ) as _i26.Future<List<_i3.MostPopularBooksEntity>>);
}

/// A class which mocks [NominatedBooksRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNominatedBooksRemoteDataSource extends _i1.Mock
    implements _i36.NominatedBooksRemoteDataSource {
  @override
  _i26.Future<List<_i3.NominatedBooksEntity>> getNominatedBooks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNominatedBooks,
          [],
        ),
        returnValue: _i26.Future<List<_i3.NominatedBooksEntity>>.value(
            <_i3.NominatedBooksEntity>[]),
        returnValueForMissingStub:
            _i26.Future<List<_i3.NominatedBooksEntity>>.value(
                <_i3.NominatedBooksEntity>[]),
      ) as _i26.Future<List<_i3.NominatedBooksEntity>>);
}

/// A class which mocks [WeeklyPopularBooksRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeeklyPopularBooksRemoteDataSource extends _i1.Mock
    implements _i37.WeeklyPopularBooksRemoteDataSource {
  @override
  _i26.Future<List<_i3.WeeklyPopularBooksEntity>> getWeeklyPopularBooks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeeklyPopularBooks,
          [],
        ),
        returnValue: _i26.Future<List<_i3.WeeklyPopularBooksEntity>>.value(
            <_i3.WeeklyPopularBooksEntity>[]),
        returnValueForMissingStub:
            _i26.Future<List<_i3.WeeklyPopularBooksEntity>>.value(
                <_i3.WeeklyPopularBooksEntity>[]),
      ) as _i26.Future<List<_i3.WeeklyPopularBooksEntity>>);
}

/// A class which mocks [AuthorInfoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthorInfoRepository extends _i1.Mock
    implements _i5.AuthorInfoRepository {
  @override
  _i26.Future<_i4.Either<_i38.Failure, _i3.AuthorInfoEntity>> getAuthorInfo(
          int? authorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAuthorInfo,
          [authorId],
        ),
        returnValue:
            _i26.Future<_i4.Either<_i38.Failure, _i3.AuthorInfoEntity>>.value(
                _FakeEither_4<_i38.Failure, _i3.AuthorInfoEntity>(
          this,
          Invocation.method(
            #getAuthorInfo,
            [authorId],
          ),
        )),
        returnValueForMissingStub:
            _i26.Future<_i4.Either<_i38.Failure, _i3.AuthorInfoEntity>>.value(
                _FakeEither_4<_i38.Failure, _i3.AuthorInfoEntity>(
          this,
          Invocation.method(
            #getAuthorInfo,
            [authorId],
          ),
        )),
      ) as _i26.Future<_i4.Either<_i38.Failure, _i3.AuthorInfoEntity>>);
}

/// A class which mocks [AwardedBooksRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAwardedBooksRepository extends _i1.Mock
    implements _i6.AwardedBooksRepository {
  @override
  _i26.Future<_i4.Either<_i38.Failure, List<_i3.AwardedBooksEntity>>>
      getAwardedBooks() => (super.noSuchMethod(
            Invocation.method(
              #getAwardedBooks,
              [],
            ),
            returnValue: _i26.Future<
                    _i4
                    .Either<_i38.Failure, List<_i3.AwardedBooksEntity>>>.value(
                _FakeEither_4<_i38.Failure, List<_i3.AwardedBooksEntity>>(
              this,
              Invocation.method(
                #getAwardedBooks,
                [],
              ),
            )),
            returnValueForMissingStub: _i26.Future<
                    _i4
                    .Either<_i38.Failure, List<_i3.AwardedBooksEntity>>>.value(
                _FakeEither_4<_i38.Failure, List<_i3.AwardedBooksEntity>>(
              this,
              Invocation.method(
                #getAwardedBooks,
                [],
              ),
            )),
          ) as _i26
              .Future<_i4.Either<_i38.Failure, List<_i3.AwardedBooksEntity>>>);
}

/// A class which mocks [BookDetailRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookDetailRepository extends _i1.Mock
    implements _i7.BookDetailRepository {
  @override
  _i26.Future<_i4.Either<_i38.Failure, _i3.BookDetailEntity>> getBookDetails(
          int? bookId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookDetails,
          [bookId],
        ),
        returnValue:
            _i26.Future<_i4.Either<_i38.Failure, _i3.BookDetailEntity>>.value(
                _FakeEither_4<_i38.Failure, _i3.BookDetailEntity>(
          this,
          Invocation.method(
            #getBookDetails,
            [bookId],
          ),
        )),
        returnValueForMissingStub:
            _i26.Future<_i4.Either<_i38.Failure, _i3.BookDetailEntity>>.value(
                _FakeEither_4<_i38.Failure, _i3.BookDetailEntity>(
          this,
          Invocation.method(
            #getBookDetails,
            [bookId],
          ),
        )),
      ) as _i26.Future<_i4.Either<_i38.Failure, _i3.BookDetailEntity>>);
}

/// A class which mocks [MostPopularAuthorsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMostPopularAuthorsRepository extends _i1.Mock
    implements _i8.MostPopularAuthorsRepository {
  @override
  _i26.Future<_i4.Either<_i38.Failure, List<_i3.MostPopularAuthorsEntity>>>
      getMostPopularAuthors() => (super.noSuchMethod(
            Invocation.method(
              #getMostPopularAuthors,
              [],
            ),
            returnValue: _i26.Future<
                    _i4.Either<_i38.Failure,
                        List<_i3.MostPopularAuthorsEntity>>>.value(
                _FakeEither_4<_i38.Failure, List<_i3.MostPopularAuthorsEntity>>(
              this,
              Invocation.method(
                #getMostPopularAuthors,
                [],
              ),
            )),
            returnValueForMissingStub: _i26.Future<
                    _i4.Either<_i38.Failure,
                        List<_i3.MostPopularAuthorsEntity>>>.value(
                _FakeEither_4<_i38.Failure, List<_i3.MostPopularAuthorsEntity>>(
              this,
              Invocation.method(
                #getMostPopularAuthors,
                [],
              ),
            )),
          ) as _i26.Future<
              _i4.Either<_i38.Failure, List<_i3.MostPopularAuthorsEntity>>>);
}

/// A class which mocks [MostPopularBooksRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMostPopularBooksRepository extends _i1.Mock
    implements _i9.MostPopularBooksRepository {
  @override
  _i26.Future<
      _i4.Either<_i38.Failure,
          List<_i3.MostPopularBooksEntity>>> getMostPopularBooks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getMostPopularBooks,
          [],
        ),
        returnValue: _i26.Future<
                _i4
                .Either<_i38.Failure, List<_i3.MostPopularBooksEntity>>>.value(
            _FakeEither_4<_i38.Failure, List<_i3.MostPopularBooksEntity>>(
          this,
          Invocation.method(
            #getMostPopularBooks,
            [],
          ),
        )),
        returnValueForMissingStub: _i26.Future<
                _i4
                .Either<_i38.Failure, List<_i3.MostPopularBooksEntity>>>.value(
            _FakeEither_4<_i38.Failure, List<_i3.MostPopularBooksEntity>>(
          this,
          Invocation.method(
            #getMostPopularBooks,
            [],
          ),
        )),
      ) as _i26
          .Future<_i4.Either<_i38.Failure, List<_i3.MostPopularBooksEntity>>>);
}

/// A class which mocks [NominatedBooksRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNominatedBooksRepository extends _i1.Mock
    implements _i10.NominatedBooksRepository {
  @override
  _i26.Future<
      _i4.Either<_i38.Failure,
          List<_i3.NominatedBooksEntity>>> getNominatedBooks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNominatedBooks,
          [],
        ),
        returnValue: _i26.Future<
                _i4.Either<_i38.Failure, List<_i3.NominatedBooksEntity>>>.value(
            _FakeEither_4<_i38.Failure, List<_i3.NominatedBooksEntity>>(
          this,
          Invocation.method(
            #getNominatedBooks,
            [],
          ),
        )),
        returnValueForMissingStub: _i26.Future<
                _i4.Either<_i38.Failure, List<_i3.NominatedBooksEntity>>>.value(
            _FakeEither_4<_i38.Failure, List<_i3.NominatedBooksEntity>>(
          this,
          Invocation.method(
            #getNominatedBooks,
            [],
          ),
        )),
      ) as _i26
          .Future<_i4.Either<_i38.Failure, List<_i3.NominatedBooksEntity>>>);
}

/// A class which mocks [WeeklyPopularBooksRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeeklyPopularBooksRepository extends _i1.Mock
    implements _i11.WeeklyPopularBooksRepository {
  @override
  _i26.Future<_i4.Either<_i38.Failure, List<_i3.WeeklyPopularBooksEntity>>>
      getWeeklyPopularBooks() => (super.noSuchMethod(
            Invocation.method(
              #getWeeklyPopularBooks,
              [],
            ),
            returnValue: _i26.Future<
                    _i4.Either<_i38.Failure,
                        List<_i3.WeeklyPopularBooksEntity>>>.value(
                _FakeEither_4<_i38.Failure, List<_i3.WeeklyPopularBooksEntity>>(
              this,
              Invocation.method(
                #getWeeklyPopularBooks,
                [],
              ),
            )),
            returnValueForMissingStub: _i26.Future<
                    _i4.Either<_i38.Failure,
                        List<_i3.WeeklyPopularBooksEntity>>>.value(
                _FakeEither_4<_i38.Failure, List<_i3.WeeklyPopularBooksEntity>>(
              this,
              Invocation.method(
                #getWeeklyPopularBooks,
                [],
              ),
            )),
          ) as _i26.Future<
              _i4.Either<_i38.Failure, List<_i3.WeeklyPopularBooksEntity>>>);
}

/// A class which mocks [GetAuthorInfoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAuthorInfoUseCase extends _i1.Mock
    implements _i12.GetAuthorInfoUseCase {
  @override
  _i5.AuthorInfoRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthorInfoRepository_5(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeAuthorInfoRepository_5(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.AuthorInfoRepository);

  @override
  _i26.Future<_i4.Either<_i38.Failure, _i3.AuthorInfoEntity>> execute(
          int? authorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [authorId],
        ),
        returnValue:
            _i26.Future<_i4.Either<_i38.Failure, _i3.AuthorInfoEntity>>.value(
                _FakeEither_4<_i38.Failure, _i3.AuthorInfoEntity>(
          this,
          Invocation.method(
            #execute,
            [authorId],
          ),
        )),
        returnValueForMissingStub:
            _i26.Future<_i4.Either<_i38.Failure, _i3.AuthorInfoEntity>>.value(
                _FakeEither_4<_i38.Failure, _i3.AuthorInfoEntity>(
          this,
          Invocation.method(
            #execute,
            [authorId],
          ),
        )),
      ) as _i26.Future<_i4.Either<_i38.Failure, _i3.AuthorInfoEntity>>);
}

/// A class which mocks [GetAwardedBooksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAwardedBooksUseCase extends _i1.Mock
    implements _i14.GetAwardedBooksUseCase {
  @override
  _i6.AwardedBooksRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAwardedBooksRepository_6(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeAwardedBooksRepository_6(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.AwardedBooksRepository);

  @override
  _i26.Future<_i4.Either<_i38.Failure, List<_i3.AwardedBooksEntity>>>
      execute() => (super.noSuchMethod(
            Invocation.method(
              #execute,
              [],
            ),
            returnValue: _i26.Future<
                    _i4
                    .Either<_i38.Failure, List<_i3.AwardedBooksEntity>>>.value(
                _FakeEither_4<_i38.Failure, List<_i3.AwardedBooksEntity>>(
              this,
              Invocation.method(
                #execute,
                [],
              ),
            )),
            returnValueForMissingStub: _i26.Future<
                    _i4
                    .Either<_i38.Failure, List<_i3.AwardedBooksEntity>>>.value(
                _FakeEither_4<_i38.Failure, List<_i3.AwardedBooksEntity>>(
              this,
              Invocation.method(
                #execute,
                [],
              ),
            )),
          ) as _i26
              .Future<_i4.Either<_i38.Failure, List<_i3.AwardedBooksEntity>>>);
}

/// A class which mocks [GetBookDetailsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetBookDetailsUseCase extends _i1.Mock
    implements _i16.GetBookDetailsUseCase {
  @override
  _i7.BookDetailRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBookDetailRepository_7(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeBookDetailRepository_7(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i7.BookDetailRepository);

  @override
  _i26.Future<_i4.Either<_i38.Failure, _i3.BookDetailEntity>> execute(
          int? bookId) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [bookId],
        ),
        returnValue:
            _i26.Future<_i4.Either<_i38.Failure, _i3.BookDetailEntity>>.value(
                _FakeEither_4<_i38.Failure, _i3.BookDetailEntity>(
          this,
          Invocation.method(
            #execute,
            [bookId],
          ),
        )),
        returnValueForMissingStub:
            _i26.Future<_i4.Either<_i38.Failure, _i3.BookDetailEntity>>.value(
                _FakeEither_4<_i38.Failure, _i3.BookDetailEntity>(
          this,
          Invocation.method(
            #execute,
            [bookId],
          ),
        )),
      ) as _i26.Future<_i4.Either<_i38.Failure, _i3.BookDetailEntity>>);
}

/// A class which mocks [GetMostPopularAuthorsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMostPopularAuthorsUseCase extends _i1.Mock
    implements _i18.GetMostPopularAuthorsUseCase {
  @override
  _i8.MostPopularAuthorsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMostPopularAuthorsRepository_8(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeMostPopularAuthorsRepository_8(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.MostPopularAuthorsRepository);

  @override
  _i26.Future<_i4.Either<_i38.Failure, List<_i3.MostPopularAuthorsEntity>>>
      execute() => (super.noSuchMethod(
            Invocation.method(
              #execute,
              [],
            ),
            returnValue: _i26.Future<
                    _i4.Either<_i38.Failure,
                        List<_i3.MostPopularAuthorsEntity>>>.value(
                _FakeEither_4<_i38.Failure, List<_i3.MostPopularAuthorsEntity>>(
              this,
              Invocation.method(
                #execute,
                [],
              ),
            )),
            returnValueForMissingStub: _i26.Future<
                    _i4.Either<_i38.Failure,
                        List<_i3.MostPopularAuthorsEntity>>>.value(
                _FakeEither_4<_i38.Failure, List<_i3.MostPopularAuthorsEntity>>(
              this,
              Invocation.method(
                #execute,
                [],
              ),
            )),
          ) as _i26.Future<
              _i4.Either<_i38.Failure, List<_i3.MostPopularAuthorsEntity>>>);
}

/// A class which mocks [GetMostPopularBooksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMostPopularBooksUseCase extends _i1.Mock
    implements _i20.GetMostPopularBooksUseCase {
  @override
  _i9.MostPopularBooksRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMostPopularBooksRepository_9(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeMostPopularBooksRepository_9(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i9.MostPopularBooksRepository);

  @override
  _i26.Future<
      _i4.Either<_i38.Failure,
          List<_i3.MostPopularBooksEntity>>> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i26.Future<
                _i4
                .Either<_i38.Failure, List<_i3.MostPopularBooksEntity>>>.value(
            _FakeEither_4<_i38.Failure, List<_i3.MostPopularBooksEntity>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
        returnValueForMissingStub: _i26.Future<
                _i4
                .Either<_i38.Failure, List<_i3.MostPopularBooksEntity>>>.value(
            _FakeEither_4<_i38.Failure, List<_i3.MostPopularBooksEntity>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i26
          .Future<_i4.Either<_i38.Failure, List<_i3.MostPopularBooksEntity>>>);
}

/// A class which mocks [GetNominatedBooksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNominatedBooksUseCase extends _i1.Mock
    implements _i22.GetNominatedBooksUseCase {
  @override
  _i10.NominatedBooksRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeNominatedBooksRepository_10(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeNominatedBooksRepository_10(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i10.NominatedBooksRepository);

  @override
  _i26.Future<
      _i4
      .Either<_i38.Failure, List<_i3.NominatedBooksEntity>>> execute() => (super
              .noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i26.Future<
                _i4.Either<_i38.Failure, List<_i3.NominatedBooksEntity>>>.value(
            _FakeEither_4<_i38.Failure, List<_i3.NominatedBooksEntity>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
        returnValueForMissingStub: _i26.Future<
                _i4.Either<_i38.Failure, List<_i3.NominatedBooksEntity>>>.value(
            _FakeEither_4<_i38.Failure, List<_i3.NominatedBooksEntity>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i26
          .Future<_i4.Either<_i38.Failure, List<_i3.NominatedBooksEntity>>>);
}

/// A class which mocks [GetWeeklyPopularBooksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWeeklyPopularBooksUseCase extends _i1.Mock
    implements _i24.GetWeeklyPopularBooksUseCase {
  @override
  _i11.WeeklyPopularBooksRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeWeeklyPopularBooksRepository_11(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeWeeklyPopularBooksRepository_11(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i11.WeeklyPopularBooksRepository);

  @override
  _i26.Future<_i4.Either<_i38.Failure, List<_i3.WeeklyPopularBooksEntity>>>
      execute() => (super.noSuchMethod(
            Invocation.method(
              #execute,
              [],
            ),
            returnValue: _i26.Future<
                    _i4.Either<_i38.Failure,
                        List<_i3.WeeklyPopularBooksEntity>>>.value(
                _FakeEither_4<_i38.Failure, List<_i3.WeeklyPopularBooksEntity>>(
              this,
              Invocation.method(
                #execute,
                [],
              ),
            )),
            returnValueForMissingStub: _i26.Future<
                    _i4.Either<_i38.Failure,
                        List<_i3.WeeklyPopularBooksEntity>>>.value(
                _FakeEither_4<_i38.Failure, List<_i3.WeeklyPopularBooksEntity>>(
              this,
              Invocation.method(
                #execute,
                [],
              ),
            )),
          ) as _i26.Future<
              _i4.Either<_i38.Failure, List<_i3.WeeklyPopularBooksEntity>>>);
}

/// A class which mocks [AuthorInfoBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthorInfoBloc extends _i1.Mock implements _i13.AuthorInfoBloc {
  @override
  _i12.GetAuthorInfoUseCase get useCase => (super.noSuchMethod(
        Invocation.getter(#useCase),
        returnValue: _FakeGetAuthorInfoUseCase_12(
          this,
          Invocation.getter(#useCase),
        ),
        returnValueForMissingStub: _FakeGetAuthorInfoUseCase_12(
          this,
          Invocation.getter(#useCase),
        ),
      ) as _i12.GetAuthorInfoUseCase);

  @override
  set useCase(_i12.GetAuthorInfoUseCase? _useCase) => super.noSuchMethod(
        Invocation.setter(
          #useCase,
          _useCase,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.AuthorInfoState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAuthorInfoState_13(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeAuthorInfoState_13(
          this,
          Invocation.getter(#state),
        ),
      ) as _i13.AuthorInfoState);

  @override
  _i26.Stream<_i13.AuthorInfoState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i26.Stream<_i13.AuthorInfoState>.empty(),
        returnValueForMissingStub: _i26.Stream<_i13.AuthorInfoState>.empty(),
      ) as _i26.Stream<_i13.AuthorInfoState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i26.Future<void> getAuthorInfoById(
    _i13.GetAuthorInfo? event,
    _i39.Emitter<_i13.AuthorInfoState>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAuthorInfoById,
          [
            event,
            emit,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);

  @override
  void add(_i13.AuthorInfoEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i13.AuthorInfoEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i13.AuthorInfoState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i13.AuthorInfoEvent>(
    _i39.EventHandler<E, _i13.AuthorInfoState>? handler, {
    _i39.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i39.Transition<_i13.AuthorInfoEvent, _i13.AuthorInfoState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i26.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);

  @override
  void onChange(_i39.Change<_i13.AuthorInfoState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AwardedBooksBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAwardedBooksBloc extends _i1.Mock implements _i15.AwardedBooksBloc {
  @override
  _i14.GetAwardedBooksUseCase get useCase => (super.noSuchMethod(
        Invocation.getter(#useCase),
        returnValue: _FakeGetAwardedBooksUseCase_14(
          this,
          Invocation.getter(#useCase),
        ),
        returnValueForMissingStub: _FakeGetAwardedBooksUseCase_14(
          this,
          Invocation.getter(#useCase),
        ),
      ) as _i14.GetAwardedBooksUseCase);

  @override
  set useCase(_i14.GetAwardedBooksUseCase? _useCase) => super.noSuchMethod(
        Invocation.setter(
          #useCase,
          _useCase,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.AwardedBooksState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAwardedBooksState_15(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeAwardedBooksState_15(
          this,
          Invocation.getter(#state),
        ),
      ) as _i15.AwardedBooksState);

  @override
  _i26.Stream<_i15.AwardedBooksState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i26.Stream<_i15.AwardedBooksState>.empty(),
        returnValueForMissingStub: _i26.Stream<_i15.AwardedBooksState>.empty(),
      ) as _i26.Stream<_i15.AwardedBooksState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i26.Future<void> getAwardedBooks(
    _i15.AwardedBooksEvent? event,
    _i39.Emitter<_i15.AwardedBooksState>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAwardedBooks,
          [
            event,
            emit,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);

  @override
  void add(_i15.AwardedBooksEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i15.AwardedBooksEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i15.AwardedBooksState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i15.AwardedBooksEvent>(
    _i39.EventHandler<E, _i15.AwardedBooksState>? handler, {
    _i39.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i39.Transition<_i15.AwardedBooksEvent, _i15.AwardedBooksState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i26.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);

  @override
  void onChange(_i39.Change<_i15.AwardedBooksState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BookDetailsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookDetailsBloc extends _i1.Mock implements _i17.BookDetailsBloc {
  @override
  _i16.GetBookDetailsUseCase get useCase => (super.noSuchMethod(
        Invocation.getter(#useCase),
        returnValue: _FakeGetBookDetailsUseCase_16(
          this,
          Invocation.getter(#useCase),
        ),
        returnValueForMissingStub: _FakeGetBookDetailsUseCase_16(
          this,
          Invocation.getter(#useCase),
        ),
      ) as _i16.GetBookDetailsUseCase);

  @override
  set useCase(_i16.GetBookDetailsUseCase? _useCase) => super.noSuchMethod(
        Invocation.setter(
          #useCase,
          _useCase,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.BookDetailsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeBookDetailsState_17(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeBookDetailsState_17(
          this,
          Invocation.getter(#state),
        ),
      ) as _i17.BookDetailsState);

  @override
  _i26.Stream<_i17.BookDetailsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i26.Stream<_i17.BookDetailsState>.empty(),
        returnValueForMissingStub: _i26.Stream<_i17.BookDetailsState>.empty(),
      ) as _i26.Stream<_i17.BookDetailsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i26.Future<void> getBookDetailsById(
    _i17.GetBookDetails? event,
    _i39.Emitter<_i17.BookDetailsState>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookDetailsById,
          [
            event,
            emit,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);

  @override
  void add(_i17.BookDetailsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i17.BookDetailsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i17.BookDetailsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i17.BookDetailsEvent>(
    _i39.EventHandler<E, _i17.BookDetailsState>? handler, {
    _i39.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i39.Transition<_i17.BookDetailsEvent, _i17.BookDetailsState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i26.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);

  @override
  void onChange(_i39.Change<_i17.BookDetailsState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MostPopularAuthorsListBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMostPopularAuthorsListBloc extends _i1.Mock
    implements _i19.MostPopularAuthorsListBloc {
  @override
  _i18.GetMostPopularAuthorsUseCase get allAuthorsUsecase =>
      (super.noSuchMethod(
        Invocation.getter(#allAuthorsUsecase),
        returnValue: _FakeGetMostPopularAuthorsUseCase_18(
          this,
          Invocation.getter(#allAuthorsUsecase),
        ),
        returnValueForMissingStub: _FakeGetMostPopularAuthorsUseCase_18(
          this,
          Invocation.getter(#allAuthorsUsecase),
        ),
      ) as _i18.GetMostPopularAuthorsUseCase);

  @override
  set allAuthorsUsecase(
          _i18.GetMostPopularAuthorsUseCase? _allAuthorsUsecase) =>
      super.noSuchMethod(
        Invocation.setter(
          #allAuthorsUsecase,
          _allAuthorsUsecase,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i19.MostPopularAuthorsListState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMostPopularAuthorsListState_19(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeMostPopularAuthorsListState_19(
          this,
          Invocation.getter(#state),
        ),
      ) as _i19.MostPopularAuthorsListState);

  @override
  _i26.Stream<_i19.MostPopularAuthorsListState> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i26.Stream<_i19.MostPopularAuthorsListState>.empty(),
        returnValueForMissingStub:
            _i26.Stream<_i19.MostPopularAuthorsListState>.empty(),
      ) as _i26.Stream<_i19.MostPopularAuthorsListState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i26.Future<void> getAllAuthorsEvent(
    _i19.GetMostPopularAuthorsEvent? event,
    _i39.Emitter<_i19.MostPopularAuthorsListState>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllAuthorsEvent,
          [
            event,
            emit,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);

  @override
  void add(_i19.MostPopularAuthorsListEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i19.MostPopularAuthorsListEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i19.MostPopularAuthorsListState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i19.MostPopularAuthorsListEvent>(
    _i39.EventHandler<E, _i19.MostPopularAuthorsListState>? handler, {
    _i39.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i39.Transition<_i19.MostPopularAuthorsListEvent,
                  _i19.MostPopularAuthorsListState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i26.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);

  @override
  void onChange(_i39.Change<_i19.MostPopularAuthorsListState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MostPopularBooksBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMostPopularBooksBloc extends _i1.Mock
    implements _i21.MostPopularBooksBloc {
  @override
  _i20.GetMostPopularBooksUseCase get useCase => (super.noSuchMethod(
        Invocation.getter(#useCase),
        returnValue: _FakeGetMostPopularBooksUseCase_20(
          this,
          Invocation.getter(#useCase),
        ),
        returnValueForMissingStub: _FakeGetMostPopularBooksUseCase_20(
          this,
          Invocation.getter(#useCase),
        ),
      ) as _i20.GetMostPopularBooksUseCase);

  @override
  set useCase(_i20.GetMostPopularBooksUseCase? _useCase) => super.noSuchMethod(
        Invocation.setter(
          #useCase,
          _useCase,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i21.MostPopularBooksState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMostPopularBooksState_21(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeMostPopularBooksState_21(
          this,
          Invocation.getter(#state),
        ),
      ) as _i21.MostPopularBooksState);

  @override
  _i26.Stream<_i21.MostPopularBooksState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i26.Stream<_i21.MostPopularBooksState>.empty(),
        returnValueForMissingStub:
            _i26.Stream<_i21.MostPopularBooksState>.empty(),
      ) as _i26.Stream<_i21.MostPopularBooksState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i26.Future<void> getMostPopularBooks(
    _i21.GetMostPopularBooks? event,
    _i39.Emitter<_i21.MostPopularBooksState>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMostPopularBooks,
          [
            event,
            emit,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);

  @override
  void add(_i21.MostPopularBooksEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i21.MostPopularBooksEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i21.MostPopularBooksState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i21.MostPopularBooksEvent>(
    _i39.EventHandler<E, _i21.MostPopularBooksState>? handler, {
    _i39.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i39.Transition<_i21.MostPopularBooksEvent,
                  _i21.MostPopularBooksState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i26.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);

  @override
  void onChange(_i39.Change<_i21.MostPopularBooksState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NominatedBooksListBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockNominatedBooksListBloc extends _i1.Mock
    implements _i23.NominatedBooksListBloc {
  @override
  _i22.GetNominatedBooksUseCase get useCase => (super.noSuchMethod(
        Invocation.getter(#useCase),
        returnValue: _FakeGetNominatedBooksUseCase_22(
          this,
          Invocation.getter(#useCase),
        ),
        returnValueForMissingStub: _FakeGetNominatedBooksUseCase_22(
          this,
          Invocation.getter(#useCase),
        ),
      ) as _i22.GetNominatedBooksUseCase);

  @override
  set useCase(_i22.GetNominatedBooksUseCase? _useCase) => super.noSuchMethod(
        Invocation.setter(
          #useCase,
          _useCase,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i23.NominatedBooksListState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeNominatedBooksListState_23(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeNominatedBooksListState_23(
          this,
          Invocation.getter(#state),
        ),
      ) as _i23.NominatedBooksListState);

  @override
  _i26.Stream<_i23.NominatedBooksListState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i26.Stream<_i23.NominatedBooksListState>.empty(),
        returnValueForMissingStub:
            _i26.Stream<_i23.NominatedBooksListState>.empty(),
      ) as _i26.Stream<_i23.NominatedBooksListState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i26.Future<void> getNominatedBooksListEvent(
    _i23.GetNominatedBooksListEvent? event,
    _i39.Emitter<_i23.NominatedBooksListState>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNominatedBooksListEvent,
          [
            event,
            emit,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);

  @override
  void add(_i23.NominatedBooksListEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i23.NominatedBooksListEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i23.NominatedBooksListState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i23.NominatedBooksListEvent>(
    _i39.EventHandler<E, _i23.NominatedBooksListState>? handler, {
    _i39.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i39.Transition<_i23.NominatedBooksListEvent,
                  _i23.NominatedBooksListState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i26.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);

  @override
  void onChange(_i39.Change<_i23.NominatedBooksListState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [WeeklyPopularBooksBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeeklyPopularBooksBloc extends _i1.Mock
    implements _i25.WeeklyPopularBooksBloc {
  @override
  _i24.GetWeeklyPopularBooksUseCase get useCase => (super.noSuchMethod(
        Invocation.getter(#useCase),
        returnValue: _FakeGetWeeklyPopularBooksUseCase_24(
          this,
          Invocation.getter(#useCase),
        ),
        returnValueForMissingStub: _FakeGetWeeklyPopularBooksUseCase_24(
          this,
          Invocation.getter(#useCase),
        ),
      ) as _i24.GetWeeklyPopularBooksUseCase);

  @override
  set useCase(_i24.GetWeeklyPopularBooksUseCase? _useCase) =>
      super.noSuchMethod(
        Invocation.setter(
          #useCase,
          _useCase,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i25.WeeklyPopularBooksState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeWeeklyPopularBooksState_25(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeWeeklyPopularBooksState_25(
          this,
          Invocation.getter(#state),
        ),
      ) as _i25.WeeklyPopularBooksState);

  @override
  _i26.Stream<_i25.WeeklyPopularBooksState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i26.Stream<_i25.WeeklyPopularBooksState>.empty(),
        returnValueForMissingStub:
            _i26.Stream<_i25.WeeklyPopularBooksState>.empty(),
      ) as _i26.Stream<_i25.WeeklyPopularBooksState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i26.Future<void> getWeeklyPopularBooks(
    _i25.GetWeeklyPopularBooksEvent? event,
    _i39.Emitter<_i25.WeeklyPopularBooksState>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeeklyPopularBooks,
          [
            event,
            emit,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);

  @override
  void add(_i25.WeeklyPopularBooksEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i25.WeeklyPopularBooksEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i25.WeeklyPopularBooksState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i25.WeeklyPopularBooksEvent>(
    _i39.EventHandler<E, _i25.WeeklyPopularBooksState>? handler, {
    _i39.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i39.Transition<_i25.WeeklyPopularBooksEvent,
                  _i25.WeeklyPopularBooksState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i26.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);

  @override
  void onChange(_i39.Change<_i25.WeeklyPopularBooksState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
